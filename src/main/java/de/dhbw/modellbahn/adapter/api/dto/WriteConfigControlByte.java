/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.dhbw.modellbahn.adapter.api.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.Objects;

/**
 * WriteConfigControlByte
 */
@JsonPropertyOrder({
        WriteConfigControlByte.JSON_PROPERTY_IS_MAIN,
        WriteConfigControlByte.JSON_PROPERTY_IS_MULTI_BYTE,
        WriteConfigControlByte.JSON_PROPERTY_DCC_PROGRAMMING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-21T20:30:51.693715200+01:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class WriteConfigControlByte {
    public static final String JSON_PROPERTY_IS_MAIN = "is_main";
    public static final String JSON_PROPERTY_IS_MULTI_BYTE = "is_multi_byte";
    public static final String JSON_PROPERTY_DCC_PROGRAMMING = "dcc_programming";
    @javax.annotation.Nonnull
    private Boolean isMain;
    @javax.annotation.Nonnull
    private Boolean isMultiByte;
    @javax.annotation.Nonnull
    private DCCProgramming dccProgramming;

    public WriteConfigControlByte() {
    }

    public WriteConfigControlByte isMain(@javax.annotation.Nonnull Boolean isMain) {
        this.isMain = isMain;
        return this;
    }

    /**
     * Get isMain
     *
     * @return isMain
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_IS_MAIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getIsMain() {
        return isMain;
    }


    @JsonProperty(JSON_PROPERTY_IS_MAIN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIsMain(@javax.annotation.Nonnull Boolean isMain) {
        this.isMain = isMain;
    }


    public WriteConfigControlByte isMultiByte(@javax.annotation.Nonnull Boolean isMultiByte) {
        this.isMultiByte = isMultiByte;
        return this;
    }

    /**
     * Get isMultiByte
     *
     * @return isMultiByte
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_IS_MULTI_BYTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Boolean getIsMultiByte() {
        return isMultiByte;
    }


    @JsonProperty(JSON_PROPERTY_IS_MULTI_BYTE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setIsMultiByte(@javax.annotation.Nonnull Boolean isMultiByte) {
        this.isMultiByte = isMultiByte;
    }


    public WriteConfigControlByte dccProgramming(@javax.annotation.Nonnull DCCProgramming dccProgramming) {
        this.dccProgramming = dccProgramming;
        return this;
    }

    /**
     * Get dccProgramming
     *
     * @return dccProgramming
     */
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DCC_PROGRAMMING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public DCCProgramming getDccProgramming() {
        return dccProgramming;
    }


    @JsonProperty(JSON_PROPERTY_DCC_PROGRAMMING)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDccProgramming(@javax.annotation.Nonnull DCCProgramming dccProgramming) {
        this.dccProgramming = dccProgramming;
    }


    /**
     * Return true if this WriteConfigControlByte object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WriteConfigControlByte writeConfigControlByte = (WriteConfigControlByte) o;
        return Objects.equals(this.isMain, writeConfigControlByte.isMain) &&
                Objects.equals(this.isMultiByte, writeConfigControlByte.isMultiByte) &&
                Objects.equals(this.dccProgramming, writeConfigControlByte.dccProgramming);
    }

    @Override
    public int hashCode() {
        return Objects.hash(isMain, isMultiByte, dccProgramming);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WriteConfigControlByte {\n");
        sb.append("    isMain: ").append(toIndentedString(isMain)).append("\n");
        sb.append("    isMultiByte: ").append(toIndentedString(isMultiByte)).append("\n");
        sb.append("    dccProgramming: ").append(toIndentedString(dccProgramming)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


}

